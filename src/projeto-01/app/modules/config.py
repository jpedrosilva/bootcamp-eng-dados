from os import getenv
from pathlib import Path

from dotenv import load_dotenv
from sqlalchemy import create_engine

from .utils_log import log_decorator


@log_decorator
def load_db_settings() -> dict:
    """
    Load database settings from environment variables.

    Reads the following environment variables from a `.env` file in the current working directory:

    - `POSTGRES_HOST` (str): The host of the PostgreSQL database.
    - `POSTGRES_USER` (str): The username for accessing the PostgreSQL database.
    - `POSTGRES_PASSWORD` (str): The password for accessing the PostgreSQL database.
    - `POSTGRES_DB` (str): The name of the PostgreSQL database.
    - `POSTGRES_PORT` (str): The port on which the PostgreSQL database is running.

    Returns:
        settings: A dictionary containing the database settings.
    """
    dotenv_path = Path.cwd() / ".env"
    load_dotenv(dotenv_path=dotenv_path)

    settings = {
        "db_host": getenv("POSTGRES_HOST"),
        "db_user": getenv("POSTGRES_USER"),
        "db_pass": getenv("POSTGRES_PASSWORD"),
        "db_name": getenv("POSTGRES_DB"),
        "db_port": getenv("POSTGRES_PORT"),
    }
    return settings


@log_decorator
def create_connection_string_postgre() -> str:
    """
    Create a connection string for PostgreSQL.

    This function uses the settings loaded from environment variables to create a connection string
    for connecting to a PostgreSQL database.

    Returns:
        connection_string: The connection string formatted as "postgresql://username:password@host:port/database".
    """
    settings = load_db_settings()
    connection_string = f"postgresql://{settings['db_user']}:{settings['db_pass']}@{settings['db_host']}:{settings['db_port']}/{settings['db_name']}"
    return connection_string


@log_decorator
def test_connection_postgre() -> None:
    """
    Tests the connection to a PostgreSQL database.

    This function creates an engine using the connection string generated by
    create_connection_string_postgre(), connects to the database, and prints
    a success message if the connection is successful.

    Raises:
        sqlalchemy.exc.SQLAlchemyError: If there is an error connecting to the database.
    """
    engine = create_engine(create_connection_string_postgre())
    with engine.connect() as conn, conn.begin():
        print("A conex√£o com o banco de dados foi bem-sucedida.")
